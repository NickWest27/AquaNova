üîπ AquaNova Project Norms

1. JavaScript / Code Style
	‚Ä¢	ES6 modules:
	‚Ä¢	export default for classes (e.g., GameState).
	‚Ä¢	import ... from syntax instead of legacy <script> global exports.
	‚Ä¢	Class-based systems: Encapsulation with constructors and methods (e.g., LogbookSystem).
	‚Ä¢	Observer pattern: Used for UI to update automatically when GameState changes.
	‚Ä¢	Snapshots for saves: Game state is stored with logbook entries, supports revert-to-past states.
	‚Ä¢	Asynchronous operations: async/await used for loading/saving.
	‚Ä¢	Defensive coding: Guards for missing elements (if (!el) return;) and graceful error handling (try/catch).
	‚Ä¢	Global state management: Central GameState updated on tick, UI stations read from it.
	‚Ä¢	Deep merge utilities: Planned for merging nested state objects without overwriting entire branches.

‚∏ª

2. Data Persistence
	‚Ä¢	localStorage:
	‚Ä¢	Keys: aquaNova_gameState, aquaNova_logbook.
	‚Ä¢	JSON serialization for saves.
	‚Ä¢	Snapshots in logbook entries: Each entry includes a gameSnapshot bookmark.
	‚Ä¢	Revert behavior:
	‚Ä¢	Can go back in time, but not forward.
	‚Ä¢	Future log entries are wiped on revert.

‚∏ª

3. File Structure
	‚Ä¢	Separation of concerns:
	‚Ä¢	/game ‚Üí core state & save management.
	‚Ä¢	/ui ‚Üí station-specific UIs (bridge, helm, logbook, quarters, etc.).
	‚Ä¢	/utils ‚Üí helper functions (e.g., idGenerator, time).
	‚Ä¢	/data ‚Üí JSON static data (crew, locations, etc.).
	‚Ä¢	/assets ‚Üí images, audio, fonts.
	‚Ä¢	Station subfolders: Each has its own html, js, and css.
	‚Ä¢	Index bootstraps global state and routes to stations.

‚∏ª

4. HTML / UI Norms
	‚Ä¢	Semantic HTML: <header>, <main>, <footer>.
	‚Ä¢	Sticky headers: Used in logbook for persistent navigation.
	‚Ä¢	Revert buttons: Always bound via JS, never inline onclick (except temporary hotspots in quarters).
	‚Ä¢	Dynamic placeholders: e.g., date advanced by 50 years, updated via JS.

‚∏ª

5. CSS / Styling
	‚Ä¢	Global scale factor:
	‚Ä¢	Virtual resolution = 1920x1080.
	‚Ä¢	setGlobalScale() computes --scale (based on current window).
	‚Ä¢	Sizes use calc(Xpx * var(--scale)) for responsive scaling.
	‚Ä¢	Color scheme:
	‚Ä¢	Dark navy background (#0a192f).
	‚Ä¢	Neon teal (#64ffda) for highlights.
	‚Ä¢	Orange (#ffa500) for mission logs.
	‚Ä¢	Flexbox for layout.
	‚Ä¢	Hover effects & transitions: For interactive buttons, log entries, tooltips.
	‚Ä¢	Consistent button classes: .control-btn, .save-btn, .cancel-btn, .revert-btn.
	‚Ä¢	Accessibility cues: Focus/hover states are visually distinct.

‚∏ª

6. UX Norms
	‚Ä¢	Smooth scrolling when adding new log entries.
	‚Ä¢	Immediate feedback:
	‚Ä¢	‚ÄúSaving‚Ä¶‚Äù ‚Üí ‚ÄúDone!‚Äù button states.
	‚Ä¢	Error states styled in red (.error-message, .log-textarea.error).
	‚Ä¢	Prevent memory leaks: Event listeners marked with dataset.bound to avoid duplicates.
	‚Ä¢	Exit navigation: Stations exit back to Quarters (and Quarters exits to Bridge).

‚∏ª

7. Narrative / Worldbuilding Norms
	‚Ä¢	Time offset: All in-game dates are +50 years from real-world.
	‚Ä¢	Hardcoded starter log: From Admiral Vasquez (M.LOG-0001).
	‚Ä¢	Organization: O.E.R.A (Oceanic Exploration and Research Alliance).
	‚Ä¢	Revert-to-start: M.LOG-0001 reverts to mission start state.
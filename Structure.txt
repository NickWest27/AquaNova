AquaNova2/
│
├── index.html               # Main entry point (loads to the logbook in the Captains Quarters)
├── main.js                  # Bootstraps the game and sorts and syncs game saves in cache, json, and state to the latest version
├── style.css                # Global styles (can be split later per module)
├── assets/                  # Images, audio, fonts
│   ├── images/              # Images used for frames or other
│   ├── audio/
│   ├── video/
│   └── fonts/
│
├── data/                    # Static game data
│   ├── logbooks/             
│   │   └── SeaTrials.json   # First campaign logbook, Sea Trials of the Aqua Nova
│   ├── contacts.json        # Character profiles, ranks, bios, contacts, etc.
│   ├── missions.json        # Mission storage, communications, locations, etc. [not implemented yet]
│   ├── locations.json       # Stores known geographic points of interest such as docks, reefs, and trenches.
│   └── logbook.json         # Saved log entries and game states
│
├── game/                    # Core game logic and state
│   ├── state.js             # Tracks ship status, location, player state, etc.
│   ├── missionManager.js    # Handles loading/triggering missions [Not implemented]
│   ├── procedural/             [Not implemented]
│   │   ├── generator.js     # Map generation, seafloor, anomalies
│   │   ├── creatureSpawner.js
│   │   └── nameGenerator.js
│   └── systems/             # Modular ship systems
│       ├── missionComputer/    # similar to FMC/MCDU of modern airliner
│       │   └── missionComputer.js     # Handles calculation (drift, routing between waypoints, etc.) pulls from ship state, passes to navComputer 
│       ├── navComputer/        # Navigation display
│       │   ├── navComputer.js     # Handles calculations on how to draw navigation display (canvas with SVG overlay)
│       │   └── navComputer.css    # Styling of navigation display
│       ├── propulsion.js
│       ├── lifeSupport.js
│       ├── power.js
│       ├── sensors.js
│       └── repairManager.js
│
├── ui/                      # UI Components and station screens
│   ├── bridge/              # Bridge station
│   │   ├── bridge.html      # bridgeFrame with cutouts for various displays, place orders for ship control and see results on screens 
│   │   ├── bridge.js        # Control of the buttons, and displays
│   │   └── bridge.css       # Style and tilt displays to fit in the bridgeFrame giving a 3D perspective.
│   │
│   ├── helm/               # Helm station for ship control such as ballast, trim, thrust, etc ...
│   │   ├── helm.html
│   │   ├── helm.js
│   │   └── helm.css
│   │
│   ├── sensors/            # Sensors station such as sonar etc ...
│   │   ├── sensors.html
│   │   ├── sensors.js
│   │   └── sensors.css
│   │
│   ├── communications/     # Communications for radio, data, satellite etc...
│   │   ├── comms.html
│   │   ├── comms.js
│   │   └── comms.css
|   |
│   ├── science/           # Science station for research and medical bay
│   │   ├── science.html
│   │   ├── science.js
│   │   └── science.css
|   |
│   ├── engineering/        # Engineering for ship systems like life support, electrical, fuel, hydraulics, propulsion,...
│   │   ├── engineering.html
│   │   ├── engineering.js
│   │   └── engineering.css
│   │
│   └── captains-quarters/  # Handles game settings
│       ├── quarters.html   # Captains room UI
│       ├── quarters.js
│       ├── quarters.css
│       └── logbook/        # Handles the ships logbook for taking notes and save/revert function
│           ├── logbook.html     # The digital logbook UI
│           ├── logbook.js
│           └── logbook.css
│
└── utils/                  # Reusable helpers, Utility functions (time, date, formatting)
    ├── scale.js            # Calculates and sets a global scale for UI
    ├── pdaOverlay.js       # Generates the global PDA for menu options and displaying crew bios, contacts, tasks...
    ├── communicatorOverlay.js   # Communicator logic for dialogue
    └── formatters.js
    